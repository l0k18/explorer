
<!DOCTYPE html>
<html lang="en" >

<head>
  <meta charset="UTF-8">
  <title>d3-earth practice</title>
  
  
  
<style type="text/css">
html,
body {
  height: 100vh;
  width: 100vw;
  margin:0;
  padding:0;
}

svg {
  width: 100%;
  height: 100%;
}

.land {
  fill: rgb(117, 87, 57);
  stroke-opacity: 0.2;
}

.land:hover {
  fill: lightgreen;
  stroke-width: 1px;
}
.point {
  opacity: 0.6;
}

.arcs {
  opacity:.1;
  stroke: gray;
  stroke-width: 3;
  fill: none;
  stroke-linejoin: round;
}

.flyers {
  stroke-width: 1;
  opacity: .6;
  stroke: darkred;
  stroke-linejoin: round;
  fill: none;
}
</style>
  
</head>

<body>

  <svg id="svg">
  <defs>
    <radialGradient id="ocean_fill" cx="75%" cy="25%"><stop offset="5%" stop-color="#fff"></stop><stop offset="100%" stop-color="#6D9BB9"></stop></radialGradient>
  </defs>
  <defs><radialGradient id="globe_highlight" cx="75%" cy="25%"><stop offset="5%" stop-color="#ffd" stop-opacity="0.6"></stop><stop offset="100%" stop-color="#ba9" stop-opacity="0.2"></stop></radialGradient></defs>
  <defs><radialGradient id="globe_shading" cx="55%" cy="45%"><stop offset="30%" stop-color="#fff" stop-opacity="0"></stop><stop offset="100%" stop-color="#505962" stop-opacity="0.3"></stop></radialGradient></defs>
</svg>
  <script src='https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.6/d3.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/topojson/1.6.20/topojson.min.js'></script>
<script src='https://bl.ocks.org/mbostock/raw/7ea1dde508cec6d2d95306f92642bc42/versor.js'></script>

  

    <script>
    /* from https://bl.ocks.org/dwtkns/4973620 */
let places = JSON.parse(`{
  "type": "FeatureCollection",
  "features": [{
      "type": "Feature",
      "properties": {
        "scalerank": 0,
        "labelrank": 1,
        "featurecla": "Populated place",
        "name": "Los Angeles",
        "nameascii": "Los Angeles",
        "adm0name": "United States of America",
        "adm0_a3": "USA",
        "adm1name": "California",
        "iso_a2": "US",
        "note": null,
        "latitude": 33.989978250199997,
        "longitude": -118.179980511,
        "changed": 0.0,
        "namediff": 0,
        "diffnote": null,
        "pop_max": 12500000,
        "pop_min": 3694820,
        "pop_other": 142265,
        "rank_max": 14,
        "rank_min": 12,
        "geonameid": 5368361.0,
        "meganame": "Los Angeles-Long Beach-Santa Ana",
        "ls_name": "Los Angeles1",
        "ls_match": 1,
        "checkme": 0
      },
      "geometry": {
        "type": "Point",
        "coordinates": [-118.181926369940413, 33.991924108765431]
      }
    }, {
      "type": "Feature",
      "properties": {
        "scalerank": 0,
        "labelrank": 1,
        "featurecla": "Admin-0 capital",
        "name": "Washington, D.C.",
        "nameascii": "Washington, D.C.",
        "adm0name": "United States of America",
        "adm0_a3": "USA",
        "adm1name": "District of Columbia",
        "iso_a2": "US",
        "note": null,
        "latitude": 38.899549376499998,
        "longitude": -77.009418580800002,
        "changed": 0.0,
        "namediff": 0,
        "diffnote": null,
        "pop_max": 4338000,
        "pop_min": 552433,
        "pop_other": 2175991,
        "rank_max": 12,
        "rank_min": 11,
        "geonameid": 4140963.0,
        "meganame": "Washington, D.C.",
        "ls_name": "Washington, D.C.",
        "ls_match": 1,
        "checkme": 5
      },
      "geometry": {
        "type": "Point",
        "coordinates": [-77.011364439437159, 38.901495235087054]
      }
    }, {
      "type": "Feature",
      "properties": {
        "scalerank": 0,
        "labelrank": 1,
        "featurecla": "Populated place",
        "name": "New York",
        "nameascii": "New York",
        "adm0name": "United States of America",
        "adm0_a3": "USA",
        "adm1name": "New York",
        "iso_a2": "US",
        "note": null,
        "latitude": 40.749979064,
        "longitude": -73.980016928799998,
        "changed": 0.0,
        "namediff": 0,
        "diffnote": null,
        "pop_max": 19040000,
        "pop_min": 8008278,
        "pop_other": 9292603,
        "rank_max": 14,
        "rank_min": 13,
        "geonameid": 5128581.0,
        "meganame": "New York-Newark",
        "ls_name": "New York",
        "ls_match": 1,
        "checkme": 0
      },
      "geometry": {
        "type": "Point",
        "coordinates": [-73.981962787406815, 40.75192492259464]
      }
    },  {
      "type": "Feature",
      "properties": {
        "scalerank": 0,
        "labelrank": 1,
        "featurecla": "Admin-1 capital",
        "name": "Sao Paulo",
        "nameascii": "Sao Paulo",
        "adm0name": "Brazil",
        "adm0_a3": "BRA",
        "adm1name": "São Paulo",
        "iso_a2": "BR",
        "note": null,
        "latitude": -23.558679587,
        "longitude": -46.625019980399998,
        "changed": 0.0,
        "namediff": 0,
        "diffnote": null,
        "pop_max": 18845000,
        "pop_min": 10021295,
        "pop_other": 11522944,
        "rank_max": 14,
        "rank_min": 14,
        "geonameid": 3448439.0,
        "meganame": "São Paulo",
        "ls_name": "Sao Paolo",
        "ls_match": 1,
        "checkme": 0
      },
      "geometry": {
        "type": "Point",
        "coordinates": [-46.626965839055231, -23.556733728378958]
      }
    }, {
      "type": "Feature",
      "properties": {
        "scalerank": 0,
        "labelrank": 0,
        "featurecla": "Admin-0 capital",
        "name": "Singapore",
        "nameascii": "Singapore",
        "adm0name": "Singapore",
        "adm0_a3": "SGP",
        "adm1name": null,
        "iso_a2": "SG",
        "note": null,
        "latitude": 1.29303346649,
        "longitude": 103.855820678,
        "changed": 0.0,
        "namediff": 0,
        "diffnote": null,
        "pop_max": 5183700,
        "pop_min": 3289529,
        "pop_other": 3314179,
        "rank_max": 13,
        "rank_min": 12,
        "geonameid": 1880252.0,
        "meganame": "Singapore",
        "ls_name": "Singapore",
        "ls_match": 1,
        "checkme": 5
      },
      "geometry": {
        "type": "Point",
        "coordinates": [103.853874819099019, 1.294979325105942]
      }
    }, {
      "type": "Feature",
      "properties": {
        "scalerank": 0,
        "labelrank": 0,
        "featurecla": "Admin-0 region capital",
        "name": "Hong Kong",
        "nameascii": "Hong Kong",
        "adm0name": "Hong Kong S.A.R.",
        "adm0_a3": "HKG",
        "adm1name": null,
        "iso_a2": "HK",
        "note": null,
        "latitude": 22.304980895,
        "longitude": 114.185009317,
        "changed": 0.0,
        "namediff": 0,
        "diffnote": null,
        "pop_max": 7206000,
        "pop_min": 4551579,
        "pop_other": 4549026,
        "rank_max": 13,
        "rank_min": 12,
        "geonameid": 1819729.0,
        "meganame": "Hong Kong",
        "ls_name": "Hong Kong",
        "ls_match": 1,
        "checkme": 0
      },
      "geometry": {
        "type": "Point",
        "coordinates": [114.183063458463039, 22.30692675357551]
      }
    }

  ]
}`);

let links = [];
let arcLines = [];
// spawn links between cities as source/target coord pairs
places.features.forEach(function (a, i) {
  places.features.forEach(function (b, j) {
    if (a !== b && j > i) {
      links.push({
        source: a.geometry.coordinates,
        target: b.geometry.coordinates });

    }
  });
});

// build geoJSON features from links array
links.forEach(function (e, i, a) {
  var feature = {
    "type": "Feature",
    "geometry": {
      "type": "LineString",
      "coordinates": [e.source, e.target] } };


  arcLines.push(feature);
});

let svg = d3.select('svg');

let {
  width,
  height } =
svg.node().getBoundingClientRect();

// layer
let canvas = svg.append('g'); //.attr('transform', `translate(${width/2}, ${height/2})`)

var drag = d3.drag().
on("start", dragstarted).
on("drag", dragged);

canvas.call(drag);

// projection
let projection = d3.geoOrthographic().translate([width / 2, height / 2]) //.clipAngle(90)
.scale(220);

// sky
var sky = d3.geoOrthographic().
translate([width / 2, height / 2])
//.clipAngle(90)
.scale(300);

// path
let path = d3.geoPath().projection(projection).pointRadius(2);

var render = function () {},
v0, // Mouse position in Cartesian coordinates at start of drag gesture.
r0, // Projection rotation as Euler angles at start.
q0; // Projection rotation as versor at start.

function dragstarted() {
  v0 = versor.cartesian(projection.invert(d3.mouse(this)));
  r0 = projection.rotate();
  q0 = versor(r0);
}

function dragged() {
  var v1 = versor.cartesian(projection.rotate(r0).invert(d3.mouse(this))),
  q1 = versor.multiply(q0, versor.delta(v0, v1)),
  r1 = versor.rotation(q1);
  projection.rotate(r1);
  sky.rotate(r1);
  render();
}

function updateFlyer(d) {
  var source = d.source,
  target = d.target;

  var mid = d3.geoInterpolate(source, target)(.5);
  var result = [projection(source),
  sky(mid),
  projection(target)];
  var swoosh = d3.line().curve(d3.curveCardinal).
  x(function (d) {return d[0];}).
  y(function (d) {return d[1];});

  return swoosh(result);
}

function fade_at_edge(d) {
  var centerPos = projection.invert([width / 2, height / 2]),
  start,end;
  // function is called on 2 different data structures..
  if (d.source) {
    start = d.source,
    end = d.target;
  } else
  {
    start = d.geometry.coordinates[0];
    end = d.geometry.coordinates[1];
  }

  var start_dist = 3.14 / 2 - d3.geoDistance(start, centerPos),
  end_dist = 3.14 / 2 - d3.geoDistance(end, centerPos);

  var fade = d3.scaleLinear().domain([-.1, 0]).range([0, .1]);
  var dist = start_dist < end_dist ? start_dist : end_dist;

  return fade(dist);
}


d3.json('https://raw.githubusercontent.com/vega/datalib/master/test/data/world-110m.json', (err, world) => {
  let countries = topojson.feature(world, world.objects.countries).features;

  canvas.append('path').datum({
    type: 'Sphere' }).
  attr('d', path).attr('fill', 'url(#ocean_fill)');

  let land = canvas.selectAll("path.land").data(countries);
  land.enter().append("path").attr("class", "land").attr("d", path).attr('fill', '#AEE1BB').attr('stroke', 'white');
  canvas.append('path').datum({
    type: 'Sphere' }).
  attr('d', path).attr('fill', 'url(#globe_highlight)');
  canvas.append('path').datum({
    type: 'Sphere' }).
  attr('d', path).attr('fill', 'url(#globe_shading)');

  let arcLines = [];
  links.forEach(function (e, i, a) {
    var feature = { "type": "Feature", "geometry": { "type": "LineString", "coordinates": [e.source, e.target] } };
    arcLines.push(feature);
  });

  let points = canvas.append("g").attr("class", "points").selectAll("path").data(places.features).
  enter().append("path").
  attr("class", "point").
  attr("d", path);


  let arcs = canvas.append("g").attr("class", "arcs").selectAll("path").data(arcLines).
  enter().append("path").
  attr("class", "arc").
  attr("d", path);


  let flyer = canvas.append("g").attr("class", "flyers").
  selectAll("path").data(links).
  enter().append("path").
  attr("class", "flyer").
  attr("d", updateFlyer);
  // .attr("stroke-dasharray", function(d){return this.getTotalLength()})
  // .attr("stroke-dashoffset", function(d){return this.getTotalLength()}).transition().duration(2000).attr("stroke-dashoffset", 0)


  render = () => {
    canvas.selectAll("path.land").attr("d", path);

    canvas.selectAll("path.point").
    attr("d", path);

    canvas.selectAll(".arc").attr("d", path).
    attr("opacity", function (d) {
      return fade_at_edge(d);
    });

    let flyer = canvas.selectAll("path.flyer").attr("d", updateFlyer).attr("opacity", function (d) {
      return fade_at_edge(d);
    });
    //   flyer.interrupt().selectAll("*").interrupt();
    //   flyer.attr("stroke-dasharray", function(d){return this.getTotalLength()})
    // .attr("stroke-dashoffset", function(d){return this.getTotalLength()}).transition().duration(2000).attr("stroke-dashoffset", 0)
  };

  render();
});
</script>




</body>

</html>
